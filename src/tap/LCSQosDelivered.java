/**
 * This class file was automatically generated by jASN1 v1.9.0 (http://www.openmuc.org)
 */

package tap;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class LCSQosDelivered implements Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.APPLICATION_CLASS, BerTag.CONSTRUCTED, 390);

	public byte[] code = null;
	public LCSTransactionStatus lCSTransactionStatus = null;
	public HorizontalAccuracyDelivered horizontalAccuracyDelivered = null;
	public VerticalAccuracyDelivered verticalAccuracyDelivered = null;
	public ResponseTime responseTime = null;
	public PositioningMethod positioningMethod = null;
	public TrackingPeriod trackingPeriod = null;
	public TrackingFrequency trackingFrequency = null;
	public AgeOfLocation ageOfLocation = null;
	
	public LCSQosDelivered() {
	}

	public LCSQosDelivered(byte[] code) {
		this.code = code;
	}

	public LCSQosDelivered(LCSTransactionStatus lCSTransactionStatus, HorizontalAccuracyDelivered horizontalAccuracyDelivered, VerticalAccuracyDelivered verticalAccuracyDelivered, ResponseTime responseTime, PositioningMethod positioningMethod, TrackingPeriod trackingPeriod, TrackingFrequency trackingFrequency, AgeOfLocation ageOfLocation) {
		this.lCSTransactionStatus = lCSTransactionStatus;
		this.horizontalAccuracyDelivered = horizontalAccuracyDelivered;
		this.verticalAccuracyDelivered = verticalAccuracyDelivered;
		this.responseTime = responseTime;
		this.positioningMethod = positioningMethod;
		this.trackingPeriod = trackingPeriod;
		this.trackingFrequency = trackingFrequency;
		this.ageOfLocation = ageOfLocation;
	}

	public int encode(OutputStream os) throws IOException {
		return encode(os, true);
	}

	public int encode(OutputStream os, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
			if (withTag) {
				return tag.encode(os) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (ageOfLocation != null) {
			codeLength += ageOfLocation.encode(os, true);
		}
		
		if (trackingFrequency != null) {
			codeLength += trackingFrequency.encode(os, true);
		}
		
		if (trackingPeriod != null) {
			codeLength += trackingPeriod.encode(os, true);
		}
		
		if (positioningMethod != null) {
			codeLength += positioningMethod.encode(os, true);
		}
		
		if (responseTime != null) {
			codeLength += responseTime.encode(os, true);
		}
		
		if (verticalAccuracyDelivered != null) {
			codeLength += verticalAccuracyDelivered.encode(os, true);
		}
		
		if (horizontalAccuracyDelivered != null) {
			codeLength += horizontalAccuracyDelivered.encode(os, true);
		}
		
		if (lCSTransactionStatus != null) {
			codeLength += lCSTransactionStatus.encode(os, true);
		}
		
		codeLength += BerLength.encodeLength(os, codeLength);

		if (withTag) {
			codeLength += tag.encode(os);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		if (totalLength == -1) {
			subCodeLength += berTag.decode(is);

			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(LCSTransactionStatus.tag)) {
				lCSTransactionStatus = new LCSTransactionStatus();
				subCodeLength += lCSTransactionStatus.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(HorizontalAccuracyDelivered.tag)) {
				horizontalAccuracyDelivered = new HorizontalAccuracyDelivered();
				subCodeLength += horizontalAccuracyDelivered.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(VerticalAccuracyDelivered.tag)) {
				verticalAccuracyDelivered = new VerticalAccuracyDelivered();
				subCodeLength += verticalAccuracyDelivered.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(ResponseTime.tag)) {
				responseTime = new ResponseTime();
				subCodeLength += responseTime.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(PositioningMethod.tag)) {
				positioningMethod = new PositioningMethod();
				subCodeLength += positioningMethod.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(TrackingPeriod.tag)) {
				trackingPeriod = new TrackingPeriod();
				subCodeLength += trackingPeriod.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(TrackingFrequency.tag)) {
				trackingFrequency = new TrackingFrequency();
				subCodeLength += trackingFrequency.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			if (berTag.tagNumber == 0 && berTag.tagClass == 0 && berTag.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berTag.equals(AgeOfLocation.tag)) {
				ageOfLocation = new AgeOfLocation();
				subCodeLength += ageOfLocation.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			int nextByte = is.read();
			if (berTag.tagNumber != 0 || berTag.tagClass != 0 || berTag.primitive != 0
			|| nextByte != 0) {
				if (nextByte == -1) {
					throw new EOFException("Unexpected end of input stream.");
				}
				throw new IOException("Decoded sequence has wrong end of contents octets");
			}
			codeLength += subCodeLength + 1;
			return codeLength;
		}

		codeLength += totalLength;

		if (totalLength == 0) {
			return codeLength;
		}
		subCodeLength += berTag.decode(is);
		if (berTag.equals(LCSTransactionStatus.tag)) {
			lCSTransactionStatus = new LCSTransactionStatus();
			subCodeLength += lCSTransactionStatus.decode(is, false);
			if (subCodeLength == totalLength+2) { subCodeLength-=2; is.reset(); }
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(HorizontalAccuracyDelivered.tag)) {
			horizontalAccuracyDelivered = new HorizontalAccuracyDelivered();
			subCodeLength += horizontalAccuracyDelivered.decode(is, false);
			if (subCodeLength == totalLength+2) { subCodeLength-=2; is.reset(); }
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(VerticalAccuracyDelivered.tag)) {
			verticalAccuracyDelivered = new VerticalAccuracyDelivered();
			subCodeLength += verticalAccuracyDelivered.decode(is, false);
			if (subCodeLength == totalLength+2) { subCodeLength-=2; is.reset(); }
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(ResponseTime.tag)) {
			responseTime = new ResponseTime();
			subCodeLength += responseTime.decode(is, false);
			if (subCodeLength == totalLength+2) { subCodeLength-=2; is.reset(); }
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(PositioningMethod.tag)) {
			positioningMethod = new PositioningMethod();
			subCodeLength += positioningMethod.decode(is, false);
			if (subCodeLength == totalLength+2) { subCodeLength-=2; is.reset(); }
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(TrackingPeriod.tag)) {
			trackingPeriod = new TrackingPeriod();
			subCodeLength += trackingPeriod.decode(is, false);
			if (subCodeLength == totalLength+2) { subCodeLength-=2; is.reset(); }
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(TrackingFrequency.tag)) {
			trackingFrequency = new TrackingFrequency();
			subCodeLength += trackingFrequency.decode(is, false);
			if (subCodeLength == totalLength+2) { subCodeLength-=2; is.reset(); }
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(AgeOfLocation.tag)) {
			ageOfLocation = new AgeOfLocation();
			subCodeLength += ageOfLocation.decode(is, false);
			if (subCodeLength == totalLength+2) { subCodeLength-=2; is.reset(); }
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream os = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(os, false);
		code = os.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		boolean firstSelectedElement = true;
		if (lCSTransactionStatus != null) {
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("lCSTransactionStatus: ").append(lCSTransactionStatus);
			firstSelectedElement = false;
		}
		
		if (horizontalAccuracyDelivered != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("horizontalAccuracyDelivered: ").append(horizontalAccuracyDelivered);
			firstSelectedElement = false;
		}
		
		if (verticalAccuracyDelivered != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("verticalAccuracyDelivered: ").append(verticalAccuracyDelivered);
			firstSelectedElement = false;
		}
		
		if (responseTime != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("responseTime: ").append(responseTime);
			firstSelectedElement = false;
		}
		
		if (positioningMethod != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("positioningMethod: ").append(positioningMethod);
			firstSelectedElement = false;
		}
		
		if (trackingPeriod != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("trackingPeriod: ").append(trackingPeriod);
			firstSelectedElement = false;
		}
		
		if (trackingFrequency != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("trackingFrequency: ").append(trackingFrequency);
			firstSelectedElement = false;
		}
		
		if (ageOfLocation != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("ageOfLocation: ").append(ageOfLocation);
			firstSelectedElement = false;
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

